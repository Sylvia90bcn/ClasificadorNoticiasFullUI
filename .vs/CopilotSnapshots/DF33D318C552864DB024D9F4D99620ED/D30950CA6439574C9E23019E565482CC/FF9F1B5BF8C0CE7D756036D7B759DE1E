using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using ClosedXML.Excel;
using ExcelDataReader;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace ClasificadorNoticiasGUI
{
    public partial class Form1 : Form
    {
        static readonly string ModeloCategoriasPath = Path.Combine("Modelo", "modelo_categorias.zip");
        static readonly string ModeloSentimientosPath = Path.Combine("Modelo", "modelo_sentimientos.zip");
        static readonly string DatosCategoriasPath = Path.Combine("Datos", "datos.csv");
        static readonly string DatosSentimientosPath = Path.Combine("Datos", "sentimientos.csv");

        MLContext ml = new MLContext(seed: 1);
        ITransformer modeloCat = null, modeloSent = null;
        private Label lblProgreso;

        public Form1()
        {
            InitializeComponent();
            BackColor = System.Drawing.Color.White;
            EnsureFolders();
            CargarModelosSiExisten();
            CargarDatasetEnGrilla();

            // Inicialización de lblProgreso
            lblProgreso = new Label
            {
                Name = "lblProgreso",
                Text = "",
                AutoSize = true,
                Location = new System.Drawing.Point(20, 420) // Ajusta la posición según tu diseño
            };
            Controls.Add(lblProgreso);
        }

        void EnsureFolders()
        {
            Directory.CreateDirectory(Path.GetDirectoryName(DatosCategoriasPath) ?? "Datos");
            Directory.CreateDirectory(Path.GetDirectoryName(ModeloCategoriasPath) ?? "Modelo");
        }

        void CargarModelosSiExisten()
        {
            // No entrenamos automáticamente; solo cargamos si el archivo existe, si no -> aviso
            if (!File.Exists(ModeloCategoriasPath))
                MessageBox.Show($"Falta el modelo de categorías: {ModeloCategoriasPath}\nPuedes crear o copiar el ZIP en la carpeta Modelo.", "Modelo faltante", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            else

                modeloCat = ml.Model.Load(ModeloCategoriasPath, out var _);

            if (!File.Exists(ModeloSentimientosPath))
                MessageBox.Show($"Falta el modelo de sentimientos: {ModeloSentimientosPath}\nPuedes crear o copiar el ZIP en la carpeta Modelo.", "Modelo faltante", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            else
                modeloSent = ml.Model.Load(ModeloSentimientosPath, out var _);
        }
        private void btnClasificar_Click(object sender, EventArgs e)
        {
            var texto = txtTitular.Text?.Trim();
            if (string.IsNullOrWhiteSpace(texto))
            {
                MessageBox.Show("Introduce un titular para clasificar.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (modeloCat == null || modeloSent == null)
            {
                MessageBox.Show("No hay modelos cargados. Coloca los ZIPs en la carpeta 'Modelo'.", "Modelos ausentes", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Crear motores de predicción
            var engineCat = ml.Model.CreatePredictionEngine<Articulo, Prediccion>(modeloCat);
            var engineSent = ml.Model.CreatePredictionEngine<Sentimiento, SentimientoPrediccion>(modeloSent);

            // Ejecutar predicciones
            var pred = engineCat.Predict(new Articulo { Texto = texto });
            var predSent = engineSent.Predict(new Sentimiento { Texto = texto });

            // Mostrar resultados en los TextBox
            txtCategoria.Text = pred.CategoriaPredicha;
            txtSentimiento.Text = predSent.SentimientoPredicho;


        }

        private void btnGuardar_Click(object sender, EventArgs e)
        {
            var texto = txtTitular.Text?.Trim();
            if (string.IsNullOrWhiteSpace(texto)) return;
            var categoria = txtCategoria.Text?.Trim() ?? "";
            var sentimiento = txtSentimiento.Text?.Trim() ?? "";

            var ya = GuardarAlDataset(texto, categoria, sentimiento);
            if (ya) MessageBox.Show("Este titular ya existe en el dataset.", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
            else MessageBox.Show("Titular guardado en dataset.", "OK", MessageBoxButtons.OK, MessageBoxIcon.Information);

            CargarDatasetEnGrilla();
        }

        private void btnReentrenarCategorias_Click(object sender, EventArgs e)
        {
            // Soportar tanto DataSource como DataTable o IEnumerable<ResultadoExcel>
            List<ResultadoExcel> extrasLista = new();
            if (dgvExcelResultados.DataSource is DataTable dtSrc)
            {
                // Convertir filas de DataTable a ResultadoExcel
                foreach (DataRow r in dtSrc.Rows)
                {
                    var tit = r.Table.Columns.Contains("Titular") ? (r["Titular"]?.ToString() ?? "") : "";
                    var cat = r.Table.Columns.Contains("Categoria") ? (r["Categoria"]?.ToString() ?? "") : "";
                    var sen = r.Table.Columns.Contains("Sentimiento") ? (r["Sentimiento"]?.ToString() ?? "") : "";
                    extrasLista.Add(new ResultadoExcel { Titular = tit, Categoria = cat, Sentimiento = sen });
                }
            }
            else
            {
                var extras = (dgvExcelResultados.DataSource as IEnumerable<ResultadoExcel>)?.ToList();
                if (extras != null) extrasLista.AddRange(extras);
            }

            IEnumerable<Articulo> extrasArt = null;
            if (extrasLista.Any())
            {
                // Primero guardar en el dataset si no existen
                foreach (var extra in extrasLista)
                {
                    if (!string.IsNullOrWhiteSpace(extra.Titular) && !string.IsNullOrWhiteSpace(extra.Categoria))
                    {
                        GuardarAlDataset(extra.Titular, extra.Categoria, extra.Sentimiento);
                    }
                }

                extrasArt = extrasLista
                    .Where(r => !string.IsNullOrWhiteSpace(r.Titular) && !string.IsNullOrWhiteSpace(r.Categoria))
                    .Select(r => new Articulo { Texto = r.Titular.Trim(), Categoria = r.Categoria.Trim() })
                    .ToList();
            }

            var modelo = EntrenarModeloCategorias(ml, extrasArt, guardar: true);
            MessageBox.Show("El modelo de categorías ha sido reentrenado exitosamente y los nuevos titulares han sido añadidos al dataset.", "Reentrenamiento Completado", MessageBoxButtons.OK, MessageBoxIcon.Information);
            CargarDatasetEnGrilla(); // Actualizar la grilla con los nuevos datos
            CargarModelosSiExisten(); // Recargar el modelo después del reentrenamiento
        }

        private void btnReentrenarSentimientos_Click(object sender, EventArgs e)
        {
            // Soportar tanto DataTable como IEnumerable<ResultadoExcel>
            List<ResultadoExcel> extrasLista = new();
            if (dgvExcelResultados.DataSource is DataTable dtSrc)
            {
                foreach (DataRow r in dtSrc.Rows)
                {
                    var tit = r.Table.Columns.Contains("Titular") ? (r["Titular"]?.ToString() ?? "") : "";
                    var cat = r.Table.Columns.Contains("Categoria") ? (r["Categoria"]?.ToString() ?? "") : "";
                    var sen = r.Table.Columns.Contains("Sentimiento") ? (r["Sentimiento"]?.ToString() ?? "") : "";
                    extrasLista.Add(new ResultadoExcel { Titular = tit, Categoria = cat, Sentimiento = sen });
                }
            }
            else
            {
                var extras = (dgvExcelResultados.DataSource as IEnumerable<ResultadoExcel>)?.ToList();
                if (extras != null) extrasLista.AddRange(extras);
            }

            IEnumerable<Sentimiento> extrasSen = null;
            if (extrasLista.Any())
            {
                // Primero guardar en el dataset si no existen
                foreach (var extra in extrasLista)
                {
                    if (!string.IsNullOrWhiteSpace(extra.Titular) && !string.IsNullOrWhiteSpace(extra.Sentimiento))
                    {
                        GuardarAlDataset(extra.Titular, extra.Categoria, extra.Sentimiento);
                    }
                }

                extrasSen = extrasLista
                    .Where(r => !string.IsNullOrWhiteSpace(r.Titular) && !string.IsNullOrWhiteSpace(r.Sentimiento))
                    .Select(r => new Sentimiento { Texto = r.Titular.Trim(), Label = r.Sentimiento.Trim() })
                    .ToList();
            }

            var modelo = EntrenarModeloSentimientos(ml, extrasSen, guardar: true);
            MessageBox.Show("El modelo de sentimientos ha sido reentrenado exitosamente y los nuevos titulares han sido añadidos al dataset.", "Reentrenamiento Completado", MessageBoxButtons.OK, MessageBoxIcon.Information);
            CargarDatasetEnGrilla(); // Actualizar la grilla con los nuevos datos
            CargarModelosSiExisten(); // Recargar el modelo después del reentrenamiento
        }


        // Nueva sobrecarga: acepta datos extra (por ejemplo, filas de dgvExcelResultados)
        static ITransformer EntrenarModeloCategorias(MLContext ml, IEnumerable<Articulo> extras, bool guardar = false)
        {
            Console.WriteLine("Entrenando modelo de categorías...");

            // Cargar dataset base desde CSV en memoria
            var datosList = new List<Articulo>();
            if (File.Exists(DatosCategoriasPath))
            {
                var lines = File.ReadAllLines(DatosCategoriasPath).Skip(1);
                foreach (var l in lines)
                {
                    var parts = SplitCsvLine(l);
                    if (parts.Length >= 2)
                    {
                        var texto = parts[0].Trim();
                        var categoria = parts[1].Trim();
                        if (!string.IsNullOrWhiteSpace(texto))
                            datosList.Add(new Articulo { Texto = texto, Categoria = categoria });
                    }
                }
            }

            // Añadir extras (sin duplicados por Texto)
            if (extras != null)
            {
                foreach (var e in extras)
                {
                    if (string.IsNullOrWhiteSpace(e.Texto)) continue;
                    if (!datosList.Any(x => x.Texto.Equals(e.Texto, StringComparison.OrdinalIgnoreCase)))
                        datosList.Add(new Articulo { Texto = e.Texto.Trim(), Categoria = e.Categoria?.Trim() ?? "" });
                }
            }

            if (datosList.Count == 0)
                throw new Exception("No hay datos para entrenar categorías.");

            var datos = ml.Data.LoadFromEnumerable(datosList);

            // Pipeline sin MapKeyToValue para evaluar
            var trainPipeline = ml.Transforms.Conversion.MapValueToKey("Label", nameof(Articulo.Categoria))
                .Append(ml.Transforms.Text.FeaturizeText("Features", nameof(Articulo.Texto)))
                .Append(ml.MulticlassClassification.Trainers.SdcaMaximumEntropy("Label", "Features"));

            // Pipeline final (incluye MapKeyToValue) para guardar / usar predicción
            var finalPipeline = trainPipeline.Append(ml.Transforms.Conversion.MapKeyToValue("PredictedLabel"));

            // Train/Test split para obtener métricas
            var split = ml.Data.TrainTestSplit(datos, testFraction: 0.2, seed: 1);
            var modelForEval = trainPipeline.Fit(split.TrainSet);
            var preds = modelForEval.Transform(split.TestSet);

            var metrics = ml.MulticlassClassification.Evaluate(preds, labelColumnName: "Label", predictedLabelColumnName: "PredictedLabel");

            // Mostrar métricas básicas
            MessageBox.Show($"Métricas categorías:\nMicroAccuracy: {metrics.MicroAccuracy:P2}\nLogLoss: {metrics.LogLoss:F4}",
                "Métricas - Categorías", MessageBoxButtons.OK, MessageBoxIcon.Information);

            // Ajustar el modelo final usando todos los datos y con MapKeyToValue para predicción/string labels
            var modeloFinal = finalPipeline.Fit(datos);

            if (guardar)
            {
                Directory.CreateDirectory("Modelo");
                ml.Model.Save(modeloFinal, datos.Schema, ModeloCategoriasPath);
                Console.WriteLine($"✅ Modelo de categorías guardado en {ModeloCategoriasPath}\n");
            }

            return modeloFinal;
        }

        // Wrapper existente: mantiene compatibilidad con llamadas anteriores
        static ITransformer EntrenarModeloCategorias(MLContext ml, bool guardar = false)
        {
            // Llamar a la sobrecarga que acepta extras con null
            return EntrenarModeloCategorias(ml, extras: null, guardar: guardar);
        }

        // Nueva sobrecarga para sentimientos
        static ITransformer EntrenarModeloSentimientos(MLContext ml, IEnumerable<Sentimiento> extras, bool guardar = false)
        {
            Console.WriteLine("Entrenando modelo de sentimientos...");

            var datosList = new List<Sentimiento>();
            if (File.Exists(DatosSentimientosPath))
            {
                var lines = File.ReadAllLines(DatosSentimientosPath).Skip(1);
                foreach (var l in lines)
                {
                    var parts = SplitCsvLine(l);
                    if (parts.Length >= 2)
                    {
                        var texto = parts[0].Trim();
                        var label = parts[1].Trim();
                        if (!string.IsNullOrWhiteSpace(texto))
                            datosList.Add(new Sentimiento { Texto = texto, Label = label });
                    }
                }
            }

            if (extras != null)
            {
                foreach (var e in extras)
                {
                    if (string.IsNullOrWhiteSpace(e.Texto)) continue;
                    if (!datosList.Any(x => x.Texto.Equals(e.Texto, StringComparison.OrdinalIgnoreCase)))
                        datosList.Add(new Sentimiento { Texto = e.Texto.Trim(), Label = e.Label?.Trim() ?? "" });
                }
            }

            if (datosList.Count == 0)
                throw new Exception("No hay datos para entrenar sentimientos.");

            var datos = ml.Data.LoadFromEnumerable(datosList);

            var trainPipeline = ml.Transforms.Conversion.MapValueToKey("Label", nameof(Sentimiento.Label))
                .Append(ml.Transforms.Text.FeaturizeText("Features", nameof(Sentimiento.Texto)))
                .Append(ml.MulticlassClassification.Trainers.SdcaMaximumEntropy("Label", "Features"));

            var finalPipeline = trainPipeline.Append(ml.Transforms.Conversion.MapKeyToValue("PredictedLabel"));

            var split = ml.Data.TrainTestSplit(datos, testFraction: 0.2, seed: 1);
            var modelForEval = trainPipeline.Fit(split.TrainSet);
            var preds = modelForEval.Transform(split.TestSet);

            var metrics = ml.MulticlassClassification.Evaluate(preds, labelColumnName: "Label", predictedLabelColumnName: "PredictedLabel");

            MessageBox.Show($"Métricas sentimientos:\nMicroAccuracy: {metrics.MicroAccuracy:P2}\nLogLoss: {metrics.LogLoss:F4}",
                "Métricas - Sentimientos", MessageBoxButtons.OK, MessageBoxIcon.Information);

            var modeloFinal = finalPipeline.Fit(datos);

            if (guardar)
            {
                Directory.CreateDirectory("Modelo");
                ml.Model.Save(modeloFinal, datos.Schema, ModeloSentimientosPath);
                Console.WriteLine($"✅ Modelo de sentimientos guardado en {ModeloSentimientosPath}\n");
            }

            return modeloFinal;
        }

        // Wrapper existente: mantiene compatibilidad con llamadas anteriores
        static ITransformer EntrenarModeloSentimientos(MLContext ml, bool guardar = false)
        {
            return EntrenarModeloSentimientos(ml, extras: null, guardar: guardar);
        }


        private void btnActualizarDataset_Click(object sender, EventArgs e)
        {
            CargarDatasetEnGrilla();
        }

        private void btnCargarExcel_ClickOld(object sender, EventArgs e)
        {
            using var ofd = new OpenFileDialog();
            ofd.Filter = "Excel Files|*.xlsx;*.xls";
            if (ofd.ShowDialog() != DialogResult.OK) return;

            var path = ofd.FileName;
            var filas = LeerExcelTitulares(path);

            if (modeloCat == null || modeloSent == null)
            {
                MessageBox.Show("No hay modelos cargados. Coloca los ZIPs en la carpeta Modelo.", "Modelos ausentes", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            var engine = ml.Model.CreatePredictionEngine<Articulo, Prediccion>(modeloCat);
            var engineSent = ml.Model.CreatePredictionEngine<Sentimiento, SentimientoPrediccion>(modeloSent);

            var resultados = new List<ResultadoExcel>();
            foreach (var t in filas)
            {
                var p = engine.Predict(new Articulo { Texto = t });
                var ps = engineSent.Predict(new Sentimiento { Texto = t });
                resultados.Add(new ResultadoExcel { Titular = t, Categoria = p.CategoriaPredicha, Sentimiento = ps.SentimientoPredicho });
            }

            dgvExcelResultados.DataSource = resultados;
        }

        private void btnCargarExcel_Click(object sender, EventArgs e)
        {
            // Abrir diálogo para seleccionar archivo
            using var ofd = new OpenFileDialog();
            ofd.Filter = "Excel Files|*.xlsx;*.xls";
            if (ofd.ShowDialog() != DialogResult.OK) return;

            var path = ofd.FileName;

            // Leer tabla completa desde Excel
            DataTable original;
            try
            {
                original = LeerExcelComoDataTable(path);
                if (original == null || original.Rows.Count == 0)
                {
                    MessageBox.Show("No se encontraron titulares en el Excel.", "Atención", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al leer Excel: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Validar que los modelos estén cargados
            if (modeloCat == null || modeloSent == null)
            {
                MessageBox.Show("No hay modelos cargados. Coloca los ZIPs en la carpeta Modelo.", "Modelos ausentes", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Buscar columna de titulares (case-insensitive)
            string titularCol = null;
            foreach (DataColumn c in original.Columns)
            {
                var name = c.ColumnName.ToLower();
                if (new[] { "titular", "título", "titulo", "title", "headline" }.Contains(name))
                { titularCol = c.ColumnName; break; }
            }
            if (titularCol == null)
            {
                MessageBox.Show("No se encontró columna 'Titular' en el Excel.", "Atención", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Crear motores de predicción
            var engineCat = ml.Model.CreatePredictionEngine<Articulo, Prediccion>(modeloCat);
            var engineSent = ml.Model.CreatePredictionEngine<Sentimiento, SentimientoPrediccion>(modeloSent);

            // Preparar DataTable de resultados: Titular, Categoria, Sentimiento, luego todas las columnas originales (excepto Titular duplicada)
            var resultadosDt = new DataTable();
            resultadosDt.Columns.Add("Titular");
            resultadosDt.Columns.Add("Categoria");
            resultadosDt.Columns.Add("Sentimiento");
            var extraCols = new List<string>();
            foreach (DataColumn c in original.Columns)
            {
                if (c.ColumnName == titularCol) continue;
                // Evitar nombres reservados
                var colName = c.ColumnName;
                int suffix = 1;
                while (resultadosDt.Columns.Contains(colName)) { colName = c.ColumnName + "_" + suffix; suffix++; }
                resultadosDt.Columns.Add(colName);
                extraCols.Add(c.ColumnName);
            }

            int total = original.Rows.Count;
            int i = 1;
            foreach (DataRow row in original.Rows)
            {
                var titular = row[titularCol]?.ToString()?.Trim();
                if (string.IsNullOrWhiteSpace(titular)) continue;

                // Predicción
                var predCat = engineCat.Predict(new Articulo { Texto = titular });
                var predSent = engineSent.Predict(new Sentimiento { Texto = titular });

                var newRow = resultadosDt.NewRow();
                newRow["Titular"] = titular;
                newRow["Categoria"] = predCat.CategoriaPredicha;
                newRow["Sentimiento"] = predSent.SentimientoPredicho;

                // Copiar columnas extra en el mismo orden que en original
                for (int ec = 0; ec < extraCols.Count; ec++)
                {
                    var origName = extraCols[ec];
                    var targetName = resultadosDt.Columns[3 + ec].ColumnName; // offset
                    newRow[targetName] = row[origName]?.ToString() ?? "";
                }

                resultadosDt.Rows.Add(newRow);

                // Mostrar progreso
                lblProgreso.Text = $"Clasificando {i}/{total}";
                Application.DoEvents();
                i++;
            }

            dgvExcelResultados.DataSource = resultadosDt;
            dgvExcelResultados.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dgvExcelResultados.Refresh();

            lblProgreso.Text = "Clasificación completada ✅";
        }

        private void btnExportarResultados_Click(object sender, EventArgs e)
        {
            if (dgvExcelResultados.DataSource == null) return;
            using var sfd = new SaveFileDialog();
            sfd.Filter = "Excel Files|*.xlsx";
            sfd.FileName = "ResultadosClasificacion.xlsx";
            if (sfd.ShowDialog() != DialogResult.OK) return;

            if (dgvExcelResultados.DataSource is DataTable dt)
            {
                using var wb = new XLWorkbook();
                var ws = wb.Worksheets.Add("Resultados");
                // Encabezados
                for (int c = 0; c < dt.Columns.Count; c++)
                    ws.Cell(1, c + 1).Value = dt.Columns[c].ColumnName;
                // Filas
                for (int r = 0; r < dt.Rows.Count; r++)
                {
                    for (int c = 0; c < dt.Columns.Count; c++)
                        ws.Cell(r + 2, c + 1).Value = dt.Rows[r][c]?.ToString() ?? "";
                }
                wb.SaveAs(sfd.FileName);
                MessageBox.Show($"Exportado: {sfd.FileName}");
                return;
            }

            var list = (dgvExcelResultados.DataSource as IEnumerable<ResultadoExcel>)?.ToList() ?? new();
            using var wb2 = new XLWorkbook();
            var ws2 = wb2.Worksheets.Add("Resultados");
            ws2.Cell(1, 1).Value = "Titular";
            ws2.Cell(1, 2).Value = "Categoria";
            ws2.Cell(1, 3).Value = "Sentimiento";
            for (int i = 0; i < list.Count; i++)
            {
                ws2.Cell(i + 2, 1).Value = list[i].Titular;
                ws2.Cell(i + 2, 2).Value = list[i].Categoria;
                ws2.Cell(i + 2, 3).Value = list[i].Sentimiento;
            }
            wb2.SaveAs(sfd.FileName);
            MessageBox.Show($"Exportado: {sfd.FileName}");
        }

        // ----------------- Helpers -----------------
        bool GuardarAlDataset(string texto, string categoria, string sentimiento)
        {
            bool yaExistia = false;

            if (!File.Exists(DatosCategoriasPath))
            {
                File.WriteAllText(DatosCategoriasPath, "Texto,Categoria\n");
            }

            var lineasCategorias = File.ReadAllLines(DatosCategoriasPath).Skip(1);
            if (!lineasCategorias.Any(l => l.Split(',')[0].Trim().Equals(texto.Trim(), StringComparison.OrdinalIgnoreCase)))
            {
                File.AppendAllText(DatosCategoriasPath, EscapeCSV(texto) + "," + EscapeCSV(categoria) + "\n");
            }
            else
            {
                yaExistia = true;
            }

            if (!File.Exists(DatosSentimientosPath))
            {
                File.WriteAllText(DatosSentimientosPath, "Texto,Label\n");
            }

            var lineasSent = File.ReadAllLines(DatosSentimientosPath).Skip(1);
            if (!lineasSent.Any(l => l.Split(',')[0].Trim().Equals(texto.Trim(), StringComparison.OrdinalIgnoreCase)))
            {
                File.AppendAllText(DatosSentimientosPath, EscapeCSV(texto) + "," + EscapeCSV(sentimiento) + "\n");
            }

            return yaExistia;
        }

        static string EscapeCSV(string valor)
        {
            if (valor.Contains(',') || valor.Contains('"'))
            {
                valor = valor.Replace("\"", "\"\"");
                return $"\"{valor}\"";
            }
            return valor;
        }

        void CargarDatasetEnGrilla()
        {
            var lista = new List<(string Texto, string Categoria, string Sentimiento)>();

            if (File.Exists(DatosCategoriasPath))
            {
                var catLines = File.ReadAllLines(DatosCategoriasPath).Skip(1);
                foreach (var l in catLines)
                {
                    var parts = SplitCsvLine(l);
                    if (parts.Length >= 2)
                        lista.Add((parts[0], parts[1], ""));
                }
            }

            if (File.Exists(DatosSentimientosPath))
            {
                var senLines = File.ReadAllLines(DatosSentimientosPath).Skip(1);
                foreach (var l in senLines)
                {
                    var parts = SplitCsvLine(l);
                    if (parts.Length >= 2)
                    {
                        var idx = lista.FindIndex(x => x.Texto.Equals(parts[0], StringComparison.OrdinalIgnoreCase));
                        if (idx >= 0)
                            lista[idx] = (lista[idx].Texto, lista[idx].Categoria, parts[1]);
                        else
                            lista.Add((parts[0], "", parts[1]));
                    }
                }
            }

            var dt = lista.Select(x => new { Texto = x.Texto, Categoria = x.Categoria, Sentimiento = x.Sentimiento }).ToList();
            dgvDataset.DataSource = dt;
        }

        static string[] SplitCsvLine(string line)
        {
            // Simple CSV split that handles quotes
            var values = new List<string>();
            bool inQuotes = false;
            var cur = "";
            for (int i = 0; i < line.Length; i++)
            {
                var ch = line[i];
                if (ch == '"') { inQuotes = !inQuotes; continue; }
                if (ch == ',' && !inQuotes) { values.Add(cur); cur = ""; continue; }
                cur += ch;
            }
            values.Add(cur);
            return values.ToArray();
        }

        static List<string> LeerExcelTitularesOld(string ruta)
        {
            var lista = new List<string>();
            if (ruta.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase))
            {
                using var wb = new XLWorkbook(ruta);
                var ws = wb.Worksheets.First();
                var col = ws.Column(1).CellsUsed().Select(c => c.GetString()).ToList();
                // asumimos cabecera en la primera fila
                for (int i = 2; i <= ws.RowCount(); i++)
                {
                    var val = ws.Cell(i, 1).GetString().Trim();
                    if (!string.IsNullOrWhiteSpace(val)) lista.Add(val);
                }
            }
            else if (ruta.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
            {
                System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
                using var stream = File.Open(ruta, FileMode.Open, FileAccess.Read);
                using var reader = ExcelReaderFactory.CreateReader(stream);
                var result = reader.AsDataSet();
                var table = result.Tables[0];
                for (int r = 1; r < table.Rows.Count; r++)
                {
                    var val = table.Rows[r][0]?.ToString()?.Trim();
                    if (!string.IsNullOrWhiteSpace(val)) lista.Add(val);
                }
            }
            return lista;
        }

        static List<string> LeerExcelTitulares(string ruta)
        {
            var lista = new List<string>();
            List<string> nombresColumnas = new();

            if (ruta.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase))
            {
                using var wb = new XLWorkbook(ruta);
                var ws = wb.Worksheets.First(); // podemos permitir seleccionar hoja después si quieres
                var rango = ws.RangeUsed();
                int totalFilas = rango.RowCount();
                int totalCols = rango.ColumnCount();

                // Leer encabezados
                for (int c = 1; c <= totalCols; c++)
                    nombresColumnas.Add(ws.Cell(1, c).GetString().Trim());

                // Buscar columna de titulares
                int colTitular = nombresColumnas.FindIndex(h =>
                    new[] { "titular", "título", "title", "headline" }
                    .Contains(h.ToLower()));

                if (colTitular == -1)
                    throw new Exception("No se encontró columna 'Titular' en el Excel.");

                // Leer filas
                for (int r = 2; r <= totalFilas; r++)
                {
                    var val = ws.Cell(r, colTitular + 1).GetString().Trim();
                    if (!string.IsNullOrWhiteSpace(val))
                        lista.Add(val);
                }
            }
            else if (ruta.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
            {
                System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
                using var stream = File.Open(ruta, FileMode.Open, FileAccess.Read);
                using var reader = ExcelReaderFactory.CreateReader(stream);
                var result = reader.AsDataSet();
                var table = result.Tables[0]; // también se puede permitir seleccionar hoja

                // Leer encabezados
                for (int c = 0; c < table.Columns.Count; c++)
                    nombresColumnas.Add(table.Rows[0][c]?.ToString().Trim() ?? "");

                // Buscar columna de titulares
                int colTitular = nombresColumnas.FindIndex(h =>
                    new[] { "titular", "título", "title", "headline" }
                    .Contains(h.ToLower()));

                if (colTitular == -1)
                    throw new Exception("No se encontró columna 'Titular' en el Excel.");

                // Leer filas
                for (int r = 1; r < table.Rows.Count; r++)
                {
                    var val = table.Rows[r][colTitular]?.ToString().Trim();
                    if (!string.IsNullOrWhiteSpace(val))
                        lista.Add(val);
                }
            }

            return lista;
        }

        static DataTable LeerExcelComoDataTable(string ruta)
        {
            var dt = new DataTable();

            if (ruta.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase))
            {
                using var wb = new XLWorkbook(ruta);
                var ws = wb.Worksheets.First();
                var rango = ws.RangeUsed();
                if (rango == null) return dt;
                int totalFilas = rango.RowCount();
                int totalCols = rango.ColumnCount();

                // Leer encabezados
                for (int c = 1; c <= totalCols; c++)
                {
                    var header = ws.Cell(1, c).GetString().Trim();
                    if (string.IsNullOrWhiteSpace(header)) header = "Column" + c;
                    // Asegurar nombres únicos
                    var colName = header;
                    int suffix = 1;
                    while (dt.Columns.Contains(colName)) { colName = header + "_" + suffix; suffix++; }
                    dt.Columns.Add(colName);
                }

                // Leer filas
                for (int r = 2; r <= totalFilas; r++)
                {
                    var row = dt.NewRow();
                    for (int c = 1; c <= totalCols; c++)
                        row[c - 1] = ws.Cell(r, c).GetString().Trim();
                    dt.Rows.Add(row);
                }
            }
            else if (ruta.EndsWith(".xls", StringComparison.OrdinalIgnoreCase))
            {
                System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
                using var stream = File.Open(ruta, FileMode.Open, FileAccess.Read);
                using var reader = ExcelReaderFactory.CreateReader(stream);
                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = _ => new ExcelDataTableConfiguration() { UseHeaderRow = true }
                });
                dt = result.Tables[0].Copy();
            }

            return dt;
        }
    }
}
